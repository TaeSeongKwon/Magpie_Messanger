'use strict';

var isPromise = require('is-promise');
var asCallback = require('ascallback');

function socketAsPromised() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var handleError = _ref.handleError;

  return function (socket, next) {
    var on = socket.on;
    socket.on = function (event, handler) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var newHandler = function newHandler() {
        for (var _len2 = arguments.length, handlerArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          handlerArgs[_key2] = arguments[_key2];
        }

        var cb = handlerArgs[handlerArgs.length - 1];
        var res = handler.apply(null, handlerArgs);

        if (isPromise(res)) {
          if (typeof handleError === 'function') {
            res = res.catch(function (err) {
              return handleError(err, event);
            });
          }

          if (typeof res.asCallback === 'function') {
            res.asCallback(cb);
          } else {
            asCallback(res, cb);
          }
        }
      };

      on.call.apply(on, [socket, event, newHandler].concat(args));
    };

    next();
  };
}

module.exports = socketAsPromised;